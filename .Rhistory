sum(is.na(Hitters$Salary)) ## see how many are missing
Hitters = na.omit(Hitters)   ## remove them
sum(is.na(Hitters$Salary))/lenght(Hitters$Salary)
sum(is.na(Hitters$Salary))/length(Hitters$Salary)
length(Hitters$Salary)
library(ISLR)
data(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary)) ## see how many are missing
sum(is.na(Hitters$Salary))/length(Hitters$Salary)
Hitters = na.omit(Hitters)   ## remove them
dim(Hitters)               ## new dimension (sample size)
sum(is.na(Hitters))        ## make sure there aren't any others.
library(ISLR)
data(Hitters)
names(Hitters)
dim(Hitters)
is.na(Hitters[,-19])
sum(is.na(Hitters[,-19]))
Hitters[,!"Salary"]
Hitters[,-"Salary"]
Hitters[,"Salary"]
Hitters[,-which(rownames(Hitters) == "Salary")]
Hitters[,-which(colnames(Hitters) == "Salary")]
sum(is.na(Hitters[,-which(colnames(Hitters) == "Salary")]))
library(leaps)
regfit = regsubsets(Salary ~ . ,Hitters)
summary(regfit)
sum(is.na(Hitters$Salary)) ## see how many are missing
sum(is.na(Hitters$Salary))/length(Hitters$Salary)
sum(is.na(Hitters[,-which(colnames(Hitters) == "Salary")])) ## check for NA everywhere else
Hitters = na.omit(Hitters)   ## remove them, can just use na.omit since we showed the NA are only in Salary
dim(Hitters)               ## new dimension (sample size)
sum(is.na(Hitters))        ## make sure there aren't any others.
library(leaps)
regfit = regsubsets(Salary ~ . ,Hitters)
summary(regfit)
regfit.full=regsubsets(Salary~., data=Hitters, nvmax = 19)
(reg.summary = summary(regfit.full))
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS", type="l")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red", cex=2, pch=20)
plot(reg.summary$cp, xlab="Number of Variables", ylab="Cp", type='l')
which.min(reg.summary$cp)
points(10,reg.summary$cp[10], col="red", cex=2, pch=20)
which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="Number of Variables", ylab="BIC", type='l')
points(6,reg.summary$bic[6], col="red", cex=2, pch=20)
which.max(reg.summary$adjr2)
which.min(reg.summary$cp)
which.min(reg.summary$bic)
plot(regfit.full, scale = "r2")
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "Cp")
plot(regfit.full, scale = "bic")
library(ISLR)
data(Hitters)
names(Hitters)
dim(Hitters)
names(Hitters)
sum(is.na(Hitters$Salary)) ## see how many are missing
sum(is.na(Hitters$Salary))/length(Hitters$Salary)
sum(is.na(Hitters[,-which(colnames(Hitters) == "Salary")])) ## check for NA everywhere else
Hitters = na.omit(Hitters)   ## remove them, can just use na.omit since we showed the NA are only in Salary
sum(is.na(Hitters[,-which(colnames(Hitters) == "Salary")])) ## check for NA everywhere else
data(Hitters)
sum(is.na(Hitters$Salary)) ## see how many are missing
sum(is.na(Hitters$Salary))/length(Hitters$Salary)
sum(is.na(Hitters[,-which(colnames(Hitters) == "Salary")])) ## check for NA everywhere else
Hitters = na.omit(Hitters)   ## remove them, can just use na.omit since we showed the NA are only in Salary
dim(Hitters)               ## new dimension (sample size)
sum(is.na(Hitters))        ## make sure there aren't any others.
library(leaps)
regfit = regsubsets(Salary ~ . ,Hitters)
summary(regfit)
summary(regfit)
regfit.full=regsubsets(Salary~., data=Hitters, nvmax = 19)
(reg.summary = summary(regfit.full))
names(reg.summary)
(reg.summary = summary(regfit.full))
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS", type="l")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red", cex=2, pch=20)
plot(reg.summary$cp, xlab="Number of Variables", ylab="Cp", type='l')
which.min(reg.summary$cp)
points(10,reg.summary$cp[10], col="red", cex=2, pch=20)
which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="Number of Variables", ylab="BIC", type='l')
points(6,reg.summary$bic[6], col="red", cex=2, pch=20)
which.max(reg.summary$adjr2)
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS", type="l")
plot(reg.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red", cex=2, pch=20)
plot(reg.summary$cp, xlab="Number of Variables", ylab="Cp", type='l')
which.min(reg.summary$cp)
points(10,reg.summary$cp[10], col="red", cex=2, pch=20)
which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="Number of Variables", ylab="BIC", type='l')
points(6,reg.summary$bic[6], col="red", cex=2, pch=20)
which.max(reg.summary$adjr2)
which.min(reg.summary$cp)
which.min(reg.summary$bic)
plot(regfit.full, scale = "r2")
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "Cp")
plot(regfit.full, scale = "bic")
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "bic")
coef(regfit.full,1:19)
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19, method="forward")
summary(regfit.fwd)
regfit.bwd=regsubsets(Salary~.,data=Hitters,nvmax=19, method="backward")
summary(regfit.bwd)
# bwd_sum <- summary(regfit.bwd)
# which.min(bwd_sum$bic)
# which.max(bwd_sum$adjr2)
coef(regfit.full,7)
coef(regfit.fwd,7)
coef(regfit.bwd,7)
library(MASS)
# Fit the null model
null.model <- lm(Fertility ~ 1, data = swiss)
# Fit the full model
full.model <- lm(Fertility ~., data = swiss)
step.model.f <- stepAIC(null.model, direction = "forward", scope = list(lower = null.model, upper = full.model))
summary(step.model.f)
step.model.b <- stepAIC(full.model, direction = "backward")
step.model <- stepAIC(full.model, direction = "both", scope = list(lower = null.model, upper = full.model))
71.42 - 0.6*71.42
38/6
38/6/4
4100000000
4100000000*.15
knitr::opts_chunk$set(echo = TRUE)
x <- c(1,5,100)
px <- c(0.4,0.4,0.2)
EX <- sum(x * px)
VX <- sum((x - EX)^2 * px)
# sample from 1, 5 and 100 with probabilities 0.4, 0.4, and 0.2 respectively.
x <- c(1,5,100)
px <- c(0.4,0.4,0.2)
EX <- sum(x * px)
VX <- sum((x - EX)^2 * px)
## take a sample of n = 100
x_sample <- sample(x, 100, prob = px)
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## do this 100 times!
x_bar_values_mean <- vector(length = 100)
for (i in 1:100){
x_sample <- sample(x, 100, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample)
}
hist(x_bar_values_mean)
hist(x_bar_values_mean, freq = F)
plot(seq(14,32,by = 0.01), dnorm(seq(14,32,by = 0.01), EX, VX/10))
## do this 100 times!
x_bar_values_mean <- vector(length = 100)
for (i in 1:100){
x_sample <- sample(x, 100, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample)
}
hist(x_bar_values_mean, freq = F)
plot(seq(14,32,by = 0.01), dnorm(seq(14,32,by = 0.01), EX, VX/10))
plot(seq(10,40,by = 0.01), dnorm(seq(14,32,by = 0.01), EX, VX/10), lty = "l")
## do this 100 times!
x_bar_values_mean <- vector(length = 100)
for (i in 1:100){
x_sample <- sample(x, 100, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample)
}
hist(x_bar_values_mean, freq = F)
plot(seq(10,40,by = 0.01), dnorm(seq(14,32,by = 0.01), EX, VX/10), lty = "l")
## do this 100 times!
x_bar_values_mean <- vector(length = 100)
for (i in 1:100){
x_sample <- sample(x, 100, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample)
}
hist(x_bar_values_mean, freq = F)
plot(seq(10,40,by = 0.01), dnorm(seq(10,40,by = 0.01), EX, VX/10), lty = "l")
plot(seq(10,40,by = 0.01), dnorm(seq(10,40,by = 0.01), EX, VX/10), type = "l")
plot(seq(10,40,by = 0.01), dnorm(seq(10,40,by = 0.01), EX, sqrt(VX)/10), type = "l")
# sample from 1, 5 and 100 with probabilities 0.4, 0.4, and 0.2 respectively.
x <- c(1,5,100)
px <- c(0.4,0.4,0.2)
EX <- sum(x * px)
VX <- sum((x - EX)^2 * px)
sdX <- sqrt(VX)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## do this 100 times!
x_bar_values_mean <- vector(length = 100)
for (i in 1:100){
x_sample <- sample(x, 100, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample)
}
hist(x_bar_values_mean, freq = F)
plot(seq(10,40,by = 0.01), dnorm(seq(10,40,by = 0.01), EX, sqrt(VX)/10), type = "l")
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
x <- c(392, 376, 401, 367, 389, 362, 409, 415, 358, 375)
mean(x)
sd(x)
x <- c(392, 376, 401, 367, 389, 362, 409, 415, 358, 375)
mean(x)
sd(x)
x <- c(1,5,100)
px <- c(0.4,0.4,0.2)
EX <- sum(x * px)
VX <- sum((x - EX)^2 * px)
sdX <- sqrt(VX)
sample(x,100, replace = T)
table(sample(x,100, replace = T))
x_sample <- sample(x, 100, replace = T, prob = px)
table(x_sample)
hist(x_sample)
x <- c(1,50,100)
px <- c(0.4,0.4,0.2)
EX <- sum(x * px)
VX <- sum((x - EX)^2 * px)
sdX <- sqrt(VX)
x_sample <- sample(x, 100, replace = T, prob = px)
hist(x_sample)
# sample from 1, 5 and 100 with probabilities 0.4, 0.4, and 0.2 respectively.
x <- c(1,5,100)
px <- c(0.4,0.4,0.2)
EX <- sum(x * px)
VX <- sum((x - EX)^2 * px)
sdX <- sqrt(VX)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
# sample from 1, 5 and 100 with probabilities 0.4, 0.4, and 0.2 respectively.
x <- c(1,5,100)
px <- c(0.4,0.4,0.2)
EX <- sum(x * px)
VX <- sum((x - EX)^2 * px)
sdX <- sqrt(VX)
EX
VX
sdX
hist(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample)
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample) # x_bar
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample) # x_bar
var(x_sample)
## take a sample of n = 100
x_sample <- sample(x, 100, replace = T, prob = px)
mean(x_sample) # x_bar
var(x_sample)
x_bar_values_mean <- vector(length = 100)
for (i in 1:100){
x_sample <- sample(x, 100, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample) #x_bar for this sample
}
hist(x_bar_values_mean, freq = F)
hist(x_bar_values_mean, freq = F, main  = "Distribution of X_bar")
## do this 100 times!
x_bar_values_mean <- vector(length = 100)
for (i in 1:100){
x_sample <- sample(x, 100, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample) #x_bar for this sample
}
hist(x_bar_values_mean, freq = F, main  = "Distribution of X_bar")
plot(seq(10,40,by = 0.01), dnorm(seq(10,40,by = 0.01), EX, sqrt(VX)/10), type = "l")
## do this 100 times!
x_bar_values_mean <- vector(length = 1000)
for (i in 1:1000){
x_sample <- sample(x, 100, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample) #x_bar for this sample
}
hist(x_bar_values_mean, freq = F, main  = "Histogram of X_bar")
plot(seq(10,40,by = 0.01), dnorm(seq(10,40,by = 0.01), EX, sdX/10), type = "l", main = "Distribution of X_bar")
## do this 100 times!
x_bar_values_mean <- vector(length = 1000)
for (i in 1:1000){
x_sample <- sample(x, 100, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample) #x_bar for this sample
}
hist(x_bar_values_mean,  main  = "Histogram of X_bar")
plot(seq(10,40,by = 0.01), dnorm(seq(10,40,by = 0.01), EX, sdX/10), type = "l", main = "Distribution of X_bar")
n = 5
mu = 45
sigma = 7/sqrt(5)
# P(X_bar < 40)
pnorm(40, mu, sigma)
# P(46 <= Xbar <= 50)
pnorm(50, mu, sigma) - pnorm(46, mu, sigma)
qnorm(.90,  mu, sigma )
```{r}
qnorm(.90,  mu, 7)
## ONE day, X ~ N(45,7)
1 - pnorm(50, 45, 7)
## do this 100 times!
x_bar_values_mean <- vector(length = 10)
for (i in 1:10){
x_sample <- sample(x, 1000, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample) #x_bar for this sample
}
hist(x_bar_values_mean,  main  = "Histogram of X_bar, n = 10")
plot(seq(10,40,by = 0.01), dnorm(seq(10,40,by = 0.01), EX, sdX/10), type = "l", main = "Distribution of X_bar")
x_bar_values_mean <- vector(length = 1000)
for (i in 1:1000){
x_sample <- sample(x, 1000, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample) #x_bar for this sample
}
hist(x_bar_values_mean,  main  = "Histogram of X_bar, n = 1000")
## do this 100 times!
x_bar_values_mean <- vector(length = 50)
for (i in 1:50){
x_sample <- sample(x, 1000, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample) #x_bar for this sample
}
hist(x_bar_values_mean,  main  = "Histogram of X_bar, n = 50")
plot(seq(10,40,by = 0.01), dnorm(seq(10,40,by = 0.01), EX, sdX/10), type = "l", main = "Distribution of X_bar")
x_bar_values_mean <- vector(length = 1000)
for (i in 1:1000){
x_sample <- sample(x, 1000, replace = T, prob = px)
x_bar_values_mean[i] <- mean(x_sample) #x_bar for this sample
}
hist(x_bar_values_mean,  main  = "Histogram of X_bar, n = 1000")
## ONE day, X ~ N(45,7)
1 - pnorm(50, 45, 7)
## the average of 5 days, X_bar ~ N(45,7/sqrt(n))
1 - pnorm(50, 45, 7/sqrt(5))
## the average of 2 days, X_bar ~ N(45,7/sqrt(2))
1 - pnorm(50, 45, 7/sqrt(2))
x <- seq(30, 60, by = 0.01)
n
x <- seq(30, 60, by = 0.01)
y <- dnorm(x, 45, 7)
z <- dnorm(x, 45, 7/sqrt(n))
plot(x,y, type = "l")
x <- seq(25, 65, by = 0.01)
y <- dnorm(x, 45, 7)
z <- dnorm(x, 45, 7/sqrt(n))
plot(x,y, type = "l")
x <- seq(25, 65, by = 0.01)
y <- dnorm(x, 45, 7)
z <- dnorm(x, 45, 7/sqrt(n))
plot(x,z, type = "l", color = 3)
points(x, y, type = "l", color = 1)
x <- seq(25, 65, by = 0.01)
y <- dnorm(x, 45, 7)
z <- dnorm(x, 45, 7/sqrt(n))
plot(x,z, type = "l", col = 3)
points(x, y, type = "l", col = 1)
x <- seq(25, 65, by = 0.01)
y <- dnorm(x, 45, 7)
z <- dnorm(x, 45, 7/sqrt(n))
plot(x,z, type = "l", col = 3)
points(x, y, type = "l", col = 1)
abline(h = 0)
pnorm(1, mu, sigma/sqrt(n)) - pnorm(.8, mu, sigma/sqrt(n))
n = 50
mu = 0.88
lambda = 1/.88
sigma = 1/lambda
pnorm(1, mu, sigma/sqrt(n)) - pnorm(.8, mu, sigma/sqrt(n))
1/.88
sigma_x_bar <- 15/sqrt(45)
sigma_x_bar
13/52*26/52
install.packages(sqldf)
install.packages("sqldf")
4*24
mean(c(180.6,	181.7,	180.9,	181.5,	182.5	,181.7,
181.4,	182.1,	182.1,	180.2,	181.8,	180.4))
560*.75
315*.75
my_fun <- function(arg){
x <- mean(arg)
y <- min(arg)
z <- IQR(arg)
return(c(x,y,z))
}
data <- rnorm(100)
my_fun(data)
data1 <- data2 <- rnorm(100)
data2_sum <- my_fun(data1)
rbind(data1_sum, data2_sum)
data1 <- data2 <- rnorm(100)
data1_sum <- my_fun(data1)
data2_sum <- my_fun(data1)
rbind(data1_sum, data2_sum)
mat <- rbind(data1_sum, data2_sum)
str(mat)
data.frame(mat)
df_of_mat <- data.frame(mat)
df_of_mat <- as.data.frame(mat)
mat <- cbind(data1_sum, data2_sum)
df_of_mat <- data.frame(mat)
96/24
20+20+20+20+20+100
200/6
dies <- 1:6
sample(dies)
sample(dies,1)
sample(dies,10, replace = T)
sample(1:6, 1)
sample(1:6, 3, replace = T)
sample(c("a", "b", "c"), 30, replace = T)
letters <- c("a", "b", "c")
sample(letters)
5964.58 * 12
0.5*0.5/(0.04/qnorm(1-(0.05/2)))^2
x <- 23 1
knitr::opts_chunk$set(echo = TRUE)
# Data for Part 4
student_names <- c("a", "b", "c" ,"d" ,"e" ,"f", "g" ,"h", "i" ,"j", "k", "l", "m", "n", "o")
midterm_grades <- c(95, 78, 76, 91, 87, 84, 92, 72, 72, 81, 82, 93, 69, 94, 80)
final_grades   <- c(92, 90, 95, 87, 88, 98, 96, 79, 83, 75, 84, 73, 91, 78, 97)
midterm_grades > final_grades
sum(midterm_grades > final_grades)
460 + 410 + 370 + 330 + 220 + 570 + 490
(460 + 410 + 370 + 330 + 220 + 570 + 490) / 7
8.34/sqrt(66)
library(ISLR)
data(Default)
default_lm <- glm(default ~ balance, family = "binomial", data = Default)
glimpse(Default)
libary(tidyverse)
glimpse(Default)
library(tidyverse)
data(Default)
glimpse(Default)
setwd("~/Documents/GitHub/BreastCancerResearch_F21")
data <- read.csv("data.csv")
default_lm <- glm(default ~ balance, family = "binomial", data = Default)
summary(default_lm)
predict(default_lm, data = Default)
predict(default_lm, data = Default, type = "response")
library(tidyverse)
data <- read.csv("data.csv")
# look at how the variables are differently distributed between the two groups
data %>% group_by(diagnosis) %>% ggplot(aes(x = radius_mean, col = diagnosis))  + geom_density()
# look at how the variables are differently distributed between the two groups
data %>% group_by(diagnosis) %>% ggplot(aes(x = smoothness_mean, col = diagnosis))  + geom_density()
data(Default)
glimpse(Default)
default_lm <- glm(default ~ balance, family = "binomial", data = Default)
summary(default_lm)
